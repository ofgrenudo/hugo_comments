# Licensed Under MIT
# Contents Taken From Action Versioning Workflow
# https://github.com/ProdigySim/action-versioning-workflow/tree/main
name: Action Versioning


on:
  workflow_call:

jobs:
  versioning:
    name: Release New Version (${{ github.ref_name }})
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to create tags and releases
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Use latest version
        with:
          fetch-depth: 0 # Important for changelog generation

      - name: Configure Git
        run: |
          # Read the author of the HEAD commit and imitate them
          AUTHOR_NAME=$(git show -s --format='%an' HEAD)
          AUTHOR_EMAIL=$(git show -s --format='%ae' HEAD)
          git config --global user.email "$AUTHOR_EMAIL"
          git config --global user.name "$AUTHOR_NAME"
      
      - name: Determine Version
        id: versioning
        run: |
          # --- Get Previous Version ---
          # Get latest tag matching vX.Y.Z, and strip the `v` prefix
          # Default to v0.0.0 if no tag is found
          PREVIOUS_TAG=$(git describe --tags --match "v*.*.*" --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          
          LAST_VERSION=$(echo "$PREVIOUS_TAG" | sed -E 's/^v//')
          LAST_MAJOR=$(echo "$LAST_VERSION" | cut -d '.' -f 1)
          LAST_MINOR=$(echo "$LAST_VERSION" | cut -d '.' -f 2)
          LAST_PATCH=$(echo "$LAST_VERSION" | cut -d '.' -f 3)

          # --- Get New Version from version.rc ---
          RC_VERSION=$(grep -o '^[^#]*' version.rc)
          NEW_MAJOR=$(echo "$RC_VERSION" | cut -d '.' -f 1)
          NEW_MINOR=$(echo "$RC_VERSION" | cut -d '.' -f 2)

          # --- Version Validation ---
          echo "Checking that $NEW_MAJOR.$NEW_MINOR is >= $LAST_MAJOR.$LAST_MINOR"
          if [[ "$NEW_MAJOR" -lt "$LAST_MAJOR" || ("$NEW_MAJOR" -eq "$LAST_MAJOR" && "$NEW_MINOR" -lt "$LAST_MINOR" ) ]]; then
            echo "Error: version.rc ($NEW_MAJOR.$NEW_MINOR) is not greater than or equal to the previous version ($LAST_MAJOR.$LAST_MINOR)."
            exit 1
          fi

          # --- Calculate New Patch Version ---
          if [[ "$NEW_MAJOR" != "$LAST_MAJOR" || "$NEW_MINOR" != "$LAST_MINOR" ]]; then
            NEW_PATCH=0
          else
            NEW_PATCH=$((LAST_PATCH + 1))
          fi
          
          NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version tag determined: $NEW_TAG"

      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          fromTag: ${{ steps.versioning.outputs.previous_tag }}
          toTag: ${{ github.sha }} # Build changelog up to the current commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: Release ${{ steps.versioning.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Floating Tags (vX.Y and vX)
        run: |
          # Extract major and minor versions from the new tag
          FULL_TAG="${{ steps.versioning.outputs.new_tag }}"
          MAJOR_TAG=$(echo "$FULL_TAG" | awk -F. '{print "v"$1}' | sed 's/v*v/v/')
          MINOR_TAG=$(echo "$FULL_TAG" | awk -F. '{print "v"$1"."$2}' | sed 's/v*v/v/')
          
          echo "Updating tags: $MAJOR_TAG and $MINOR_TAG"
          
          # Create and force push the major and minor tags
          git tag -f "$MINOR_TAG" -a -m "Version $MINOR_TAG"
          git tag -f "$MAJOR_TAG" -a -m "Version $MAJOR_TAG"
          git push origin --tags --force